import React, { useState } from 'react';
import { Upload, FileText, Eye, Brain, Download } from 'lucide-react';
import { FileAnalysis } from '../types';
import { AIService } from '../services/aiService';

interface FileIntelligenceProps {
  theme: 'light' | 'dark';
}

const FileIntelligence: React.FC<FileIntelligenceProps> = ({ theme }) => {
  const [dragActive, setDragActive] = useState(false);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysis, setAnalysis] = useState<FileAnalysis | null>(null);
  const [fileContent, setFileContent] = useState<string>('');
  const [fileName, setFileName] = useState<string>('');

  const handleDrag = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      handleFile(e.dataTransfer.files[0]);
    }
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      handleFile(e.target.files[0]);
    }
  };

  const handleFile = async (file: File) => {
    if (!file.type.includes('text') && !file.name.endsWith('.txt') && !file.name.endsWith('.md')) {
      alert('Please upload a text file (.txt, .md) for analysis.');
      return;
    }

    setFileName(file.name);
    setIsAnalyzing(true);
    
    try {
      const content = await file.text();
      setFileContent(content);
      
      const analysisResult = await AIService.analyzeFile(content);
      setAnalysis(analysisResult);
    } catch (error) {
      console.error('Error analyzing file:', error);
      alert('Error analyzing file. Please try again.');
    } finally {
      setIsAnalyzing(false);
    }
  };

  const downloadAnalysis = () => {
    if (!analysis || !fileName) return;

    const analysisText = `
File Analysis Report
===================

File: ${fileName}
Analyzed: ${new Date().toLocaleString()}

Summary:
${analysis.summary}

Word Count: ${analysis.wordCount}
Sentiment: ${analysis.sentiment}

Keywords:
${analysis.keywords.map(keyword => `- ${keyword}`).join('\n')}

AI Insights:
${analysis.insights.map(insight => `- ${insight}`).join('\n')}

Generated by Bolt AI - Created by Jaideep Balde
    `.trim();

    const blob = new Blob([analysisText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${fileName.split('.')[0]}_analysis.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const getSentimentColor = (sentiment: string) => {
    switch (sentiment) {
      case 'positive': return 'text-green-600 dark:text-green-400';
      case 'negative': return 'text-red-600 dark:text-red-400';
      default: return 'text-yellow-600 dark:text-yellow-400';
    }
  };

  return (
    <div className={`h-full ${theme === 'dark' ? 'bg-gray-900' : 'bg-white'}`}>
      {/* Header */}
      <div className={`border-b p-6 ${theme === 'dark' ? 'border-gray-700 bg-gray-800' : 'border-gray-200 bg-gray-50'}`}>
        <h2 className={`text-2xl font-bold ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
          File Intelligence
        </h2>
        <p className={`mt-2 ${theme === 'dark' ? 'text-gray-400' : 'text-gray-600'}`}>
          Upload documents for AI-powered analysis and insights
        </p>
      </div>

      <div className="p-6 overflow-y-auto" style={{ height: 'calc(100% - 120px)' }}>
        {!analysis ? (
          /* Upload Area */
          <div className="max-w-4xl mx-auto">
            <div
              className={`border-2 border-dashed rounded-lg p-12 text-center transition-all duration-200 ${
                dragActive
                  ? 'border-purple-500 bg-purple-50 dark:bg-purple-900/20'
                  : theme === 'dark'
                  ? 'border-gray-600 hover:border-gray-500'
                  : 'border-gray-300 hover:border-gray-400'
              }`}
              onDragEnter={handleDrag}
              onDragLeave={handleDrag}
              onDragOver={handleDrag}
              onDrop={handleDrop}
            >
              {isAnalyzing ? (
                <div className="space-y-4">
                  <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-purple-500 mx-auto"></div>
                  <p className={`text-lg ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
                    Analyzing your file...
                  </p>
                  <p className={`text-sm ${theme === 'dark' ? 'text-gray-400' : 'text-gray-600'}`}>
                    AI is processing your document
                  </p>
                </div>
              ) : (
                <div className="space-y-4">
                  <Upload className={`h-16 w-16 mx-auto ${theme === 'dark' ? 'text-gray-400' : 'text-gray-500'}`} />
                  <div>
                    <p className={`text-lg font-medium ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
                      Drag and drop your file here
                    </p>
                    <p className={`text-sm ${theme === 'dark' ? 'text-gray-400' : 'text-gray-600'}`}>
                      or click to browse
                    </p>
                  </div>
                  <div className="flex justify-center">
                    <label className="flex items-center space-x-2 px-6 py-3 bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-lg hover:from-purple-600 hover:to-pink-600 cursor-pointer transition-all duration-200">
                      <FileText className="w-5 h-5" />
                      <span>Choose File</span>
                      <input
                        type="file"
                        className="hidden"
                        accept=".txt,.md"
                        onChange={handleFileSelect}
                      />
                    </label>
                  </div>
                  <p className={`text-xs ${theme === 'dark' ? 'text-gray-500' : 'text-gray-400'}`}>
                    Supported formats: .txt, .md
                  </p>
                </div>
              )}
            </div>
          </div>
        ) : (
          /* Analysis Results */
          <div className="max-w-6xl mx-auto">
            <div className={`rounded-lg border p-6 mb-6 ${
              theme === 'dark' ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'
            }`}>
              <div className="flex items-center justify-between mb-4">
                <h3 className={`text-xl font-semibold ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
                  Analysis Results: {fileName}
                </h3>
                <div className="flex items-center space-x-4">
                  <button
                    onClick={downloadAnalysis}
                    className="flex items-center space-x-2 px-4 py-2 bg-gradient-to-r from-blue-500 to-cyan-500 text-white rounded-lg hover:from-blue-600 hover:to-cyan-600 transition-all duration-200"
                  >
                    <Download className="w-4 h-4" />
                    <span>Download Report</span>
                  </button>
                  <button
                    onClick={() => {
                      setAnalysis(null);
                      setFileContent('');
                      setFileName('');
                    }}
                    className={`px-4 py-2 rounded-lg transition-colors ${
                      theme === 'dark'
                        ? 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                  >
                    Analyze Another File
                  </button>
                </div>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
                {/* Summary Card */}
                <div className={`rounded-lg p-4 ${
                  theme === 'dark' ? 'bg-gray-700 border border-gray-600' : 'bg-gray-50 border border-gray-200'
                }`}>
                  <h4 className={`font-semibold mb-2 ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
                    Summary
                  </h4>
                  <p className={`text-sm ${theme === 'dark' ? 'text-gray-300' : 'text-gray-700'}`}>
                    {analysis.summary}
                  </p>
                </div>

                {/* Stats Card */}
                <div className={`rounded-lg p-4 ${
                  theme === 'dark' ? 'bg-gray-700 border border-gray-600' : 'bg-gray-50 border border-gray-200'
                }`}>
                  <h4 className={`font-semibold mb-2 ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
                    Statistics
                  </h4>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className={`text-sm ${theme === 'dark' ? 'text-gray-400' : 'text-gray-600'}`}>
                        Word Count:
                      </span>
                      <span className={`text-sm font-medium ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
                        {analysis.wordCount.toLocaleString()}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className={`text-sm ${theme === 'dark' ? 'text-gray-400' : 'text-gray-600'}`}>
                        Sentiment:
                      </span>
                      <span className={`text-sm font-medium capitalize ${getSentimentColor(analysis.sentiment)}`}>
                        {analysis.sentiment}
                      </span>
                    </div>
                  </div>
                </div>

                {/* Keywords Card */}
                <div className={`rounded-lg p-4 ${
                  theme === 'dark' ? 'bg-gray-700 border border-gray-600' : 'bg-gray-50 border border-gray-200'
                }`}>
                  <h4 className={`font-semibold mb-2 ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
                    Top Keywords
                  </h4>
                  <div className="flex flex-wrap gap-2">
                    {analysis.keywords.slice(0, 5).map((keyword, index) => (
                      <span
                        key={index}
                        className={`px-2 py-1 text-xs rounded-full ${
                          theme === 'dark'
                            ? 'bg-purple-900 text-purple-300'
                            : 'bg-purple-100 text-purple-700'
                        }`}
                      >
                        {keyword}
                      </span>
                    ))}
                  </div>
                </div>
              </div>

              {/* AI Insights */}
              <div className={`rounded-lg p-4 mb-6 ${
                theme === 'dark' ? 'bg-gray-700 border border-gray-600' : 'bg-gray-50 border border-gray-200'
              }`}>
                <div className="flex items-center space-x-2 mb-3">
                  <Brain className="w-5 h-5 text-purple-500" />
                  <h4 className={`font-semibold ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
                    AI Insights
                  </h4>
                </div>
                <ul className="space-y-2">
                  {analysis.insights.map((insight, index) => (
                    <li
                      key={index}
                      className={`flex items-start space-x-2 text-sm ${
                        theme === 'dark' ? 'text-gray-300' : 'text-gray-700'
                      }`}
                    >
                      <span className="text-purple-500 mt-1">•</span>
                      <span>{insight}</span>
                    </li>
                  ))}
                </ul>
              </div>

              {/* File Preview */}
              <div className={`rounded-lg border ${
                theme === 'dark' ? 'border-gray-600' : 'border-gray-200'
              }`}>
                <div className={`p-4 border-b ${
                  theme === 'dark' ? 'border-gray-600 bg-gray-700' : 'border-gray-200 bg-gray-50'
                }`}>
                  <div className="flex items-center space-x-2">
                    <Eye className="w-5 h-5 text-purple-500" />
                    <h4 className={`font-semibold ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
                      File Preview
                    </h4>
                  </div>
                </div>
                <div className="p-4 max-h-96 overflow-y-auto">
                  <pre className={`text-sm whitespace-pre-wrap ${
                    theme === 'dark' ? 'text-gray-300' : 'text-gray-700'
                  }`}>
                    {fileContent.length > 2000 ? `${fileContent.substring(0, 2000)}...` : fileContent}
                  </pre>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default FileIntelligence;